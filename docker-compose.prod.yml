version: "3.9"

services:
  ref-production-server:
    container_name: ref-production-server
    image: ${APP_IMAGE_PROD_SERVER}:${APP_IMAGE_PROD_SERVER_TAG}
    ports:
      - "${SERVER_PORT}:8080"
    environment:
      MODE: ${MODE}
      PORT: ${PORT}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      MICROSOFT_TENANT_ID: ${MICROSOFT_TENANT_ID}
      MICROSOFT_CLIENT_SECRET_ID: ${MICROSOFT_CLIENT_SECRET_ID}
      PUBLIC_URL: ${PUBLIC_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      ref-production-postgres:
        condition: service_healthy
      ref-production-redis:
        condition: service_started
    volumes:
      - ~/.var/app/miftech.refina/storage/uploads/transaction-attachments:/app/storage/uploads/transaction-attachments
    networks:
      - refina_network
    restart: always

  ref-production-client:
    container_name: ref-production-client
    image: ${APP_IMAGE_PROD_CLIENT}:${APP_IMAGE_PROD_CLIENT_TAG}
    ports:
      - "${CLIENT_PORT}:80"
    depends_on:
      - ref-production-server
    networks:
      - refina_network
    restart: always

  ref-production-postgres:
    container_name: ref-production-postgres
    image: cleisonfmelo/postgres-pg-cron
    ports:
      - "127.0.0.1:${DB_PORT}:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: refina
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - refina_network
    restart: always

  ref-production-redis:
    container_name: ref-production-redis
    image: redis:7.2-alpine
    ports:
      - "127.0.0.1:${REDIS_PORT}:6379"
    networks:
      - refina_network
    restart: always

  ref-production-worker:
    container_name: ref-production-worker
    image: ${APP_IMAGE_PROD_WORKER}:${APP_IMAGE_PROD_WORKER_TAG}
    environment:
      MODE: ${MODE}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VIRTUAL_HOST}
    depends_on:
      ref-production-postgres:
        condition: service_healthy
      ref-production-redis:
        condition: service_started
      ref-production-rabbitmq:
        condition: service_started
    networks:
      - refina_network
    restart: always

volumes:
  production_postgres_data:

networks:
  refina_network:
    name: refina_network
    driver: bridge