version: "3.9"

services:
  ref-production-server:
    container_name: ref-production-server
    image: ${APP_IMAGE_PROD_SERVER}:${APP_IMAGE_PROD_SERVER_TAG}
    ports:
      - "8082:8080"
    depends_on:
      ref-production-postgres:
        condition: service_healthy
    volumes:
      - ./.server.log:/app/.server.log
      - ./config.production.json:/app/config.json:ro
      - ./.env.production:/app/.env:ro
    networks:
      - refina_network
    restart: always

  ref-production-client:
    container_name: ref-production-client
    image: ${APP_IMAGE_PROD_CLIENT}:${APP_IMAGE_PROD_CLIENT_TAG}
    ports:
      - "3002:80"
    depends_on:
      - ref-production-server
    networks:
      - refina_network
    restart: always

  ref-production-postgres:
    container_name: ref-production-postgres
    image: cleisonfmelo/postgres-pg-cron
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: refina
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - refina_network
    restart: always

  ref-production-worker:
    container_name: ref-production-worker
    image: ${APP_IMAGE_PROD_WORKER}:${APP_IMAGE_PROD_WORKER_TAG}
    depends_on:
      ref-production-postgres:
        condition: service_healthy
    volumes:
      - ./config.production.json:/app/config.json:ro
      - ./.env.production:/app/.env:ro
    networks:
      - refina_network
    restart: always

  ref-production-migrate:
    container_name: ref-production-migrate
    image: ${APP_IMAGE_PROD_MIGRATE}:${APP_IMAGE_PROD_MIGRATE_TAG}
    environment:
      - MODE=production
      - DB_HOST=ref-production-postgres
      - DB_PORT=5432
    depends_on:
      ref-production-postgres:
        condition: service_healthy
    networks:
      - refina_network
    profiles:
      - migrate

volumes:
  production_postgres_data:

networks:
  refina_network:
    name: refina_network
    driver: bridge
