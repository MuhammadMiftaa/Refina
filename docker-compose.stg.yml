version: "3.9"

services:
  ref-staging-server:
    container_name: ref-staging-server
    image: ${APP_IMAGE_STG_SERVER}:${APP_IMAGE_STG_SERVER_TAG}
    ports:
      - "8081:8080"
    depends_on:
      ref-staging-postgres:
        condition: service_healthy
      ref-staging-redis:
        condition: service_started
    volumes:
      - ~/.var/app/miftech.refina/storage/uploads/transaction-attachments:/app/storage/uploads/transaction-attachments
      - ./config.staging.json:/app/config.json:ro
      - ./.env.staging:/app/.env:ro
    networks:
      - refina_staging_network
    restart: always

  ref-staging-client:
    container_name: ref-staging-client
    image: ${APP_IMAGE_STG_CLIENT}:${APP_IMAGE_STG_CLIENT_TAG}
    ports:
      - "3001:80"
    depends_on:
      - ref-staging-server
    networks:
      - refina_staging_network
    restart: always

  ref-staging-postgres:
    container_name: ref-staging-postgres
    image: cleisonfmelo/postgres-pg-cron
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: refina
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - refina_staging_network
    restart: always

  ref-staging-redis:
    container_name: ref-staging-redis
    image: redis:7.2-alpine
    ports:
      - "127.0.0.1:6380:6379"
    networks:
      - refina_staging_network
    restart: always

  ref-staging-worker:
    container_name: ref-staging-worker
    image: ${APP_IMAGE_STG_WORKER}:${APP_IMAGE_STG_WORKER_TAG}
    depends_on:
      ref-staging-postgres:
        condition: service_healthy
      ref-staging-redis:
        condition: service_started
    volumes:
      - ./config.staging.json:/app/config.json:ro
      - ./.env.staging:/app/.env:ro
    networks:
      - refina_staging_network
    restart: always

volumes:
  staging_postgres_data:

networks:
  refina_staging_network:
    name: refina_staging_network
    driver: bridge
