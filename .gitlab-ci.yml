stages:
  - build
  - release
  - deploy

variables:
  TAG_IMAGE: $CI_COMMIT_TAG

build_server:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    # - changes:
    #     - server/**/*
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building server application..."
    - docker build -f server/Dockerfile.api -t "$CI_REGISTRY_IMAGE/server:latest" -t "$CI_REGISTRY_IMAGE/server:$TAG_IMAGE" ./server
    - docker push "$CI_REGISTRY_IMAGE/server" --all-tags
    - echo "$CI_JOB_ID" > server_build_job_id.txt
  artifacts:
    paths:
      - server_build_job_id.txt

build_worker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building worker application..."
    - docker build -f server/Dockerfile.worker -t "$CI_REGISTRY_IMAGE/worker:latest" -t "$CI_REGISTRY_IMAGE/worker:$TAG_IMAGE" ./server
    - docker push "$CI_REGISTRY_IMAGE/worker" --all-tags
    - echo "$CI_JOB_ID" > worker_build_job_id.txt
  artifacts:
    paths:
      - worker_build_job_id.txt

build_client:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    # - changes:
    #     - client/**/*
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building client application..."
    - docker build --build-arg VITE_API_URL=https://api-refina.miftech.web.id/v1 --build-arg VITE_MODE=production -t "$CI_REGISTRY_IMAGE/client:latest" -t "$CI_REGISTRY_IMAGE/client:$TAG_IMAGE" ./client
    - docker push "$CI_REGISTRY_IMAGE/client" --all-tags
    - echo "$CI_JOB_ID" > client_build_job_id.txt
  artifacts:
    paths:
      - client_build_job_id.txt

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_server
      artifacts: true
    - job: build_client
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    # - changes:
    #     - server/**/*
    # - changes:
    #     - client/**/*
  variables:
    RELEASE_TITLE: "Release ${CI_COMMIT_TAG}"
    RELEASE_DESC: "Tagged after commit ${CI_COMMIT_SHORT_SHA}, message ${CI_COMMIT_TAG_MESSAGE}"
  script:
    - export SERVER_BUILD_JOB_ID="$(cat server_build_job_id.txt)"
    - export CLIENT_BUILD_JOB_ID="$(cat client_build_job_id.txt)"
    - echo "create release ${CI_COMMIT_TAG} from jobs $SERVER_BUILD_JOB_ID and $CLIENT_BUILD_JOB_ID"
    - release-cli create --name "${RELEASE_TITLE}" --description "${RELEASE_DESC}" --tag-name "${CI_COMMIT_TAG}"

deploy-staging:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
  before_script:
    - "which ssh-agent || ( apk update && apk add --no-cache openssh)"
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - |
      ssh -p $SSH_PORT -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_STAGING} "
        export APP_IMAGE_STG_CLIENT=\"$CI_REGISTRY_IMAGE/client\" &&
        export APP_IMAGE_STG_CLIENT_TAG=$TAG_IMAGE &&
        export APP_IMAGE_STG_SERVER=\"$CI_REGISTRY_IMAGE/server\" &&
        export APP_IMAGE_STG_SERVER_TAG=$TAG_IMAGE &&
        export APP_IMAGE_STG_WORKER=\"$CI_REGISTRY_IMAGE/worker\" &&
        echo $CI_REGISTRY_IMAGE/worker
        export APP_IMAGE_STG_WORKER_TAG=$CI_COMMIT_TAG &&

        cd ~/web/staging
        if [ ! -d ~/web/staging/Refina ] || [ ! -d ~/web/staging/Refina/.git ]; then
          git clone git@gitlab.com:muhammadmifta-personal-project/Refina.git ~/web/staging/Refina
          cd ~/web/staging/Refina
        else
          cd ~/web/staging/Refina && git pull
        fi

        if [ -f ~/web/staging/Refina/.env.staging ]; then
          unzip -o -q ~/web/staging/Refina/dump.zip -d ~/web/staging/Refina
        else
          unzip ~/web/staging/Refina/dump.zip -d ~/web/staging/Refina
        fi

        echo -e \"\\nAPP_IMAGE_STG_CLIENT=$CI_REGISTRY_IMAGE/client\" >> ~/web/staging/Refina/.env.staging &&
        echo \"APP_IMAGE_STG_CLIENT_TAG=$CI_COMMIT_TAG\" >> ~/web/staging/Refina/.env.staging &&
        echo \"APP_IMAGE_STG_SERVER=$CI_REGISTRY_IMAGE/server\" >> ~/web/staging/Refina/.env.staging &&
        echo \"APP_IMAGE_STG_SERVER_TAG=$CI_COMMIT_TAG\" >> ~/web/staging/Refina/.env.staging &&
        echo \"APP_IMAGE_STG_WORKER=$CI_REGISTRY_IMAGE/worker\" >> ~/web/staging/Refina/.env.staging &&
        echo \"APP_IMAGE_STG_WORKER_TAG=$CI_COMMIT_TAG\" >> ~/web/staging/Refina/.env.staging &&

        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker compose -f docker-compose.stg.yml down &&
        docker compose -f docker-compose.stg.yml pull &&
        docker compose -f docker-compose.stg.yml --env-file .env.staging up -d
      "
  environment:
    name: staging
    url: https://staging.refina.miftech.web.id

deploy-production:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
  before_script:
    - "which ssh-agent || ( apk update && apk add --no-cache openssh)"
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - |
      ssh -p $SSH_PORT -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_PRODUCTION} " 
        export APP_IMAGE_PROD_CLIENT=\"$CI_REGISTRY_IMAGE/client\" &&
        echo $CI_REGISTRY_IMAGE/client
        export APP_IMAGE_PROD_CLIENT_TAG=$CI_COMMIT_TAG &&
        export APP_IMAGE_PROD_SERVER=\"$CI_REGISTRY_IMAGE/server\" &&
        echo $CI_REGISTRY_IMAGE/server
        export APP_IMAGE_PROD_SERVER_TAG=$CI_COMMIT_TAG &&
        export APP_IMAGE_PROD_WORKER=\"$CI_REGISTRY_IMAGE/worker\" &&
        echo $CI_REGISTRY_IMAGE/worker
        export APP_IMAGE_PROD_WORKER_TAG=$CI_COMMIT_TAG &&

        cd ~/web/production
        if [ ! -d ~/web/staging/Refina ] || [ ! -d ~/web/production/Refina/.git ]; then
          git clone git@gitlab.com:muhammadmifta-personal-project/Refina.git ~/web/production/Refina
          cd ~/web/production/Refina
        else
          cd ~/web/production/Refina && git pull
        fi
        
        if [ -f ~/web/production/Refina/.env.production ]; then
          unzip -o -q ~/web/production/Refina/dump.zip -d ~/web/production/Refina
        else
          unzip ~/web/production/Refina/dump.zip -d ~/web/production/Refina
        fi

        echo -e \"\\nAPP_IMAGE_PROD_CLIENT=$CI_REGISTRY_IMAGE/client\" >> ~/web/production/Refina/.env.production &&
        echo \"APP_IMAGE_PROD_CLIENT_TAG=$CI_COMMIT_TAG\" >> ~/web/production/Refina/.env.production &&
        echo \"APP_IMAGE_PROD_SERVER=$CI_REGISTRY_IMAGE/server\" >> ~/web/production/Refina/.env.production &&
        echo \"APP_IMAGE_PROD_SERVER_TAG=$CI_COMMIT_TAG\" >> ~/web/production/Refina/.env.production &&
        echo \"APP_IMAGE_PROD_WORKER=$CI_REGISTRY_IMAGE/worker\" >> ~/web/production/Refina/.env.production &&
        echo \"APP_IMAGE_PROD_WORKER_TAG=$CI_COMMIT_TAG\" >> ~/web/production/Refina/.env.production &&

        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker compose -f docker-compose.prod.yml down &&
        docker compose -f docker-compose.prod.yml pull &&
        docker compose -f docker-compose.prod.yml --env-file .env.production up -d
      "
  environment:
    name: production
    url: https://refina.miftech.web.id
  # when: manual
