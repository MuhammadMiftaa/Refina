stages:
  - build
  - release
  # - deploy

build_server:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    # - changes:
    #     - server/**/*
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - echo "Building server application..."
    - docker build -t registry.gitlab.com/muhammadmifta-personal-project/refina/server/$CI_COMMIT_TAG ./server
    - docker push registry.gitlab.com/muhammadmifta-personal-project/refina/server/$CI_COMMIT_TAG
    - echo "$CI_JOB_ID" > server_build_job_id.txt
  artifacts:
    paths:
      - server_build_job_id.txt

build_client:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    # - changes:
    #     - client/**/*
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building client application..."
    - docker build -t registry.gitlab.com/muhammadmifta-personal-project/refina/client/$CI_COMMIT_TAG ./client
    - docker push registry.gitlab.com/muhammadmifta-personal-project/refina/client/$CI_COMMIT_TAG
    - echo "$CI_JOB_ID" > client_build_job_id.txt
  artifacts:
    paths:
      - client_build_job_id.txt

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_server
      artifacts: true
    - job: build_client
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]{4}\.[0-9]{1,3}$/
    - changes:
      - server/**/*
    - changes:
      - client/**/*
  variables:
    RELEASE_TITLE: "Release ${CI_COMMIT_TAG}"
    RELEASE_DESC: "Tagged after commit ${CI_COMMIT_SHORT_SHA}, message ${CI_COMMIT_TAG_MESSAGE}"
  script:
    - export SERVER_BUILD_JOB_ID="$(cat server_build_job_id.txt)"
    - export CLIENT_BUILD_JOB_ID="$(cat client_build_job_id.txt)"
    - echo "create release ${CI_COMMIT_TAG} from jobs $SERVER_BUILD_JOB_ID and $CLIENT_BUILD_JOB_ID"

# deploy-staging:
#   stage: deploy
#   image: alpine:latest
#   environment:
#     name: staging
#     url: https://staging-refina.miftech.web.id
#   before_script:
#     - 'which ssh-agent || ( apk update && apk add --no-cache openssh )'
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 700 ~/.ssh/id_rsa
#     - eval "$(ssh-agent -s)"
#     - ssh-add ~/.ssh/id_rsa
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_STAGING} "export APP_IMAGE_STG=$CI_REGISTRY_IMAGE && export APP_IMAGE_STG_TAG=$CI_COMMIT_TAG && docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && cd /root/refina && git pull && docker-compose -f docker-compose.stg.yml down && docker-compose -f docker-compose.stg.yml pull && docker-compose -f docker-compose.stg.yml up -d"

# deploy-production:
#   stage: deploy
#   image: alpine:latest
#   before_script:
#     - 'which ssh-agent || ( apk update && apk add --no-cache openssh )'
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 700 ~/.ssh/id_rsa
#     - eval "$(ssh-agent -s)"
#     - ssh-add ~/.ssh/id_rsa
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_PRODUCTION} "export APP_IMAGE_PROD=$CI_REGISTRY_IMAGE && export APP_IMAGE_PROD_TAG=$CI_COMMIT_TAG && docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && cd /root/refina && git pull && docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
#   environment:
#     name: production
#     url: https://refina.miftech.web.id
#   when: manual
