

Berikut adalah langkah-langkah untuk mengintegrasikan OAuth 2.0 menggunakan Microsoft Account ke aplikasi Golang Gin:

---

### **1. Daftarkan Aplikasi di Azure Portal**
1. Masuk ke [Azure Portal](https://portal.azure.com/).
2. Navigasikan ke **Azure Active Directory** > **App registrations**.
3. Klik **New registration**, lalu isi:
   - **Name**: Nama aplikasi.
   - **Supported account types**: Pilih opsi yang sesuai dengan target aplikasi Anda (misalnya, hanya akun organisasi atau semua akun).
   - **Redirect URI**: Masukkan URI callback untuk aplikasi Gin Anda (contoh: `http://localhost:8080/auth/microsoft/callback`).
4. Klik **Register**.

---

### **2. Konfigurasi Aplikasi**
1. Salin **Application (client) ID** dan **Directory (tenant) ID**.
2. Buat **Client Secret**:
   - Buka tab **Certificates & secrets**.
   - Klik **New client secret** dan salin nilainya.

---

### **3. Tambahkan Library Golang**
Gunakan library seperti [golang.org/x/oauth2](https://pkg.go.dev/golang.org/x/oauth2) untuk menangani OAuth 2.0.

Tambahkan dependency berikut di `go.mod`:
```bash
go get golang.org/x/oauth2
go get golang.org/x/oauth2/microsoft
```

---

### **4. Konfigurasikan Middleware OAuth**
Buat file konfigurasi `oauth.go` untuk menangani logika OAuth.

#### **oauth.go**
```go
package main

import (
	"context"
	"net/http"
	"os"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/microsoft"
)

var (
	oauthConfig = &oauth2.Config{
		ClientID:     os.Getenv("MICROSOFT_CLIENT_ID"),     // Masukkan Client ID
		ClientSecret: os.Getenv("MICROSOFT_CLIENT_SECRET"), // Masukkan Client Secret
		Endpoint:     microsoft.AzureADEndpoint("common"), // Endpoint Microsoft OAuth
		RedirectURL:  "http://localhost:8080/auth/microsoft/callback",
		Scopes:       []string{"User.Read"},
	}
)

func loginHandler(c *gin.Context) {
	// Redirect user ke Microsoft OAuth
	url := oauthConfig.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	c.Redirect(http.StatusFound, url)
}

func callbackHandler(c *gin.Context) {
	code := c.Query("code")
	if code == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "No code in callback"})
		return
	}

	// Tukarkan kode dengan token
	token, err := oauthConfig.Exchange(context.Background(), code)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to exchange token"})
		return
	}

	// Gunakan token untuk mengambil data pengguna
	client := oauthConfig.Client(context.Background(), token)
	resp, err := client.Get("https://graph.microsoft.com/v1.0/me")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch user data"})
		return
	}
	defer resp.Body.Close()

	c.JSON(http.StatusOK, gin.H{"message": "Login successful", "response": resp.Body})
}
```

---

### **5. Tambahkan Route di Gin**
Integrasikan handler OAuth ke dalam router aplikasi Anda.

#### **main.go**
```go
package main

import (
	"github.com/gin-gonic/gin"
)

func main() {
	r := gin.Default()

	// Route OAuth
	r.GET("/auth/microsoft/login", loginHandler)
	r.GET("/auth/microsoft/callback", callbackHandler)

	// Jalankan server
	r.Run(":8080")
}
```

---

### **6. Jalankan Aplikasi**
1. Export environment variables:
   ```bash
   export MICROSOFT_CLIENT_ID="your-client-id"
   export MICROSOFT_CLIENT_SECRET="your-client-secret"
   ```
2. Jalankan aplikasi:
   ```bash
   go run main.go
   ```

3. Akses URL berikut untuk memulai login:
   ```
   http://localhost:8080/auth/microsoft/login
   ```

---

Jika berhasil, Anda akan diarahkan kembali ke endpoint callback dengan token dan detail pengguna. Sesuaikan logika untuk menyimpan token atau mengautentikasi pengguna di aplikasi Anda.





Membuat OAuth dengan GitHub untuk aplikasi Golang menggunakan framework **Gin** adalah langkah yang sangat baik untuk mengintegrasikan otentikasi pihak ketiga ke dalam aplikasi Anda. Berikut langkah-langkahnya:

---

### **Langkah 1: Daftar Aplikasi Anda di GitHub**
1. Masuk ke [GitHub Developer Settings](https://github.com/settings/developers).
2. Klik **"New OAuth App"**.
3. Isi detail aplikasi:
   - **Application name**: Nama aplikasi Anda.
   - **Homepage URL**: URL aplikasi Anda (misalnya `http://localhost:8080` untuk pengujian lokal).
   - **Authorization callback URL**: URL untuk callback (misalnya `http://localhost:8080/auth/github/callback`).
4. Klik **"Register application"**.
5. Catat **Client ID** dan **Client Secret**.

---

### **Langkah 2: Instal Paket yang Dibutuhkan**
Gunakan paket **oauth2** dari `golang.org/x/oauth2` untuk menangani OAuth.

```bash
go get golang.org/x/oauth2
go get golang.org/x/oauth2/github
```

---

### **Langkah 3: Buat Konfigurasi OAuth**
Buat file `oauth.go` untuk mengatur konfigurasi GitHub OAuth.

```go
package main

import (
	"context"
	"net/http"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/github"
)

var (
	oauthConfig = &oauth2.Config{
		ClientID:     "YOUR_CLIENT_ID",     // Ganti dengan Client ID dari GitHub
		ClientSecret: "YOUR_CLIENT_SECRET", // Ganti dengan Client Secret dari GitHub
		RedirectURL:  "http://localhost:8080/auth/github/callback",
		Scopes:       []string{"user:email"},
		Endpoint:     github.Endpoint,
	}
	oauthStateString = "randomstate" // Ganti dengan string acak untuk keamanan
)

// HandleLogin redirect user to GitHub for authentication.
func HandleLogin(c *gin.Context) {
	url := oauthConfig.AuthCodeURL(oauthStateString)
	c.Redirect(http.StatusTemporaryRedirect, url)
}

// HandleCallback handles the callback from GitHub after authentication.
func HandleCallback(c *gin.Context) {
	ctx := context.Background()
	code := c.Query("code")
	state := c.Query("state")

	if state != oauthStateString {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid OAuth state"})
		return
	}

	token, err := oauthConfig.Exchange(ctx, code)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to exchange token"})
		return
	}

	client := oauthConfig.Client(ctx, token)
	resp, err := client.Get("https://api.github.com/user")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch user info"})
		return
	}
	defer resp.Body.Close()

	c.JSON(http.StatusOK, gin.H{"message": "Login successful", "token": token})
}
```

---

### **Langkah 4: Integrasi dengan Gin**
Tambahkan rute untuk login dan callback ke aplikasi Gin Anda.

```go
package main

import (
	"github.com/gin-gonic/gin"
)

func main() {
	r := gin.Default()

	r.GET("/auth/github/login", HandleLogin)
	r.GET("/auth/github/callback", HandleCallback)

	r.Run(":8080") // Jalankan server di port 8080
}
```

---

### **Langkah 5: Jalankan Aplikasi**
1. Jalankan aplikasi Anda:
   ```bash
   go run main.go
   ```
2. Akses endpoint login GitHub: `http://localhost:8080/auth/github/login`.
3. Setelah login, Anda akan diarahkan kembali ke `http://localhost:8080/auth/github/callback`.

---

### **Langkah Opsional: Ambil Detail Pengguna**
Untuk mendapatkan data pengguna, Anda dapat mem-parsing respons dari API GitHub.

```go
import (
	"encoding/json"
	"io/ioutil"
)

func HandleCallback(c *gin.Context) {
	// ... kode sebelumnya ...

	resp, err := client.Get("https://api.github.com/user")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch user info"})
		return
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to read response body"})
		return
	}

	var userInfo map[string]interface{}
	if err := json.Unmarshal(body, &userInfo); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to parse user info"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Login successful", "user": userInfo})
}
```

---

Dengan langkah-langkah ini, aplikasi Anda sudah dapat menggunakan OAuth dengan GitHub. Anda bisa menambahkan logika tambahan seperti menyimpan token atau data pengguna ke database untuk kebutuhan lanjutan. Jika ada yang ingin ditanyakan, silakan beri tahu! ðŸ˜Š